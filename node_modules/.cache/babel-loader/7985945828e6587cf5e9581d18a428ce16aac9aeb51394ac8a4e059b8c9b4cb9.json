{"ast":null,"code":"import React,{useRef,useState}from'react';import'./Field.css';import Vertex from\"./Vertex\";import ClickAction from\"./ClickAction\";import EdgeContainer from\"./EdgeContainer\";import InfoBox from\"./InfoBox\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Field(props){const{clickAction,color}=props;const[dragging,setDragging]=useState(null);const[startEdge,setStartEdge]=useState(null);const[vertices,setVertices]=useState([]);const[edges,setEdges]=useState([]);const root=useRef();const edgesWithEndpoint=vertex=>{return edges.filter(edge=>edge.endpoints.includes(vertex));};const adjacentVertices=vertex=>{return edgesWithEndpoint(vertex).map(edge=>{return edge.endpoints;}).flat().filter(otherVertex=>otherVertex!==vertex);};const addVertex=newVertex=>{const copy=[...vertices];copy.push(newVertex);setVertices(copy);};const removeVertex=index=>{const vertex=vertices[index];const edgesToRemove=edgesWithEndpoint(vertex);const edgeCopy=[...edges].filter(edge=>!edgesToRemove.includes(edge));setEdges(edgeCopy);const vertexCopy=[...vertices];vertexCopy.splice(index,1);setVertices(vertexCopy);};const colorVertex=(index,color)=>{const copy=[...vertices];copy[index].color=color;setVertices(copy);};const addEdge=newEdge=>{const copy=[...edges];copy.push(newEdge);setEdges(copy);};const addDirectedEdge=newEdge=>{const copy=[...edges];copy.push(newEdge);setEdges(copy);};const removeEdge=index=>{const copy=[...edges];copy.splice(index,1);setEdges(copy);};const colorEdge=(index,color)=>{const copy=[...edges];copy[index].color=color;setEdges(copy);};const onMouseDown=event=>{if(clickAction===ClickAction.ADD_VERTEX){const x=event.clientX;const y=event.clientY;addVertex({position:[x,y],color:color});}};const onVertexMouseDown=(event,index)=>{if(clickAction===ClickAction.SELECT){startDrag(index);}else if(clickAction===ClickAction.ADD_EDGE){startAddEdge(index);}else if(clickAction===ClickAction.ADD_DIRECTED_EDGE){startAddDirectedEdge(index);}else if(clickAction===ClickAction.DELETE){removeVertex(index);}else if(clickAction===ClickAction.COLOR){colorVertex(index,color);}};const onEdgeMouseDown=(event,index)=>{if(clickAction===ClickAction.DELETE){removeEdge(index);}else if(clickAction===ClickAction.COLOR){colorEdge(index,color);}};const moveVertex=(index,newPosition)=>{const copy=[...vertices];copy[index].position=newPosition;setVertices(copy);};const startDrag=index=>{setDragging(index);};const stopDrag=event=>{event.preventDefault();setDragging(null);};const startAddEdge=index=>{if(startEdge===null){setStartEdge(index);}else{addEdge({endpoints:[vertices[startEdge],vertices[index]],color:color,directedBool:false});setStartEdge(null);}};const startAddDirectedEdge=index=>{if(startEdge===null){setStartEdge(index);}else{addDirectedEdge({endpoints:[vertices[startEdge],vertices[index]],color:color,directedBool:true});setStartEdge(null);}};const onMouseMove=event=>{if(dragging!==null){event.preventDefault();moveVertex(dragging,[event.clientX,event.clientY]);}};const numVertices=()=>{return vertices.length;};const numEdges=()=>{return edges.length;};const numComponents=()=>{let components=0;const verticesSeen=new Array(vertices.length).fill(false);const dfs=index=>{verticesSeen[index]=true;for(const vertex of adjacentVertices(vertices[index])){const newIndex=vertices.indexOf(vertex);if(!verticesSeen[newIndex]){dfs(newIndex);}}};for(let i=0;i<vertices.length;i++){if(verticesSeen[i]){continue;}dfs(i);components++;}return components;};return/*#__PURE__*/_jsxs(\"div\",{className:\"Field\",onMouseDown:onMouseDown,onMouseMove:onMouseMove,onMouseUp:stopDrag,ref:root,children:[/*#__PURE__*/_jsx(InfoBox,{numVertices:numVertices(),numEdges:numEdges(),numComponents:numComponents()}),vertices.map((vertex,index)=>{return/*#__PURE__*/_jsx(Vertex,{className:index===startEdge?'Vertex-Selected':'',vertex:vertex,onMouseDown:event=>onVertexMouseDown(event,index)},index);}),/*#__PURE__*/_jsx(EdgeContainer,{edges:edges,onMouseDown:onEdgeMouseDown})]});}export default Field;","map":{"version":3,"names":["React","useRef","useState","Vertex","ClickAction","EdgeContainer","InfoBox","jsx","_jsx","jsxs","_jsxs","Field","props","clickAction","color","dragging","setDragging","startEdge","setStartEdge","vertices","setVertices","edges","setEdges","root","edgesWithEndpoint","vertex","filter","edge","endpoints","includes","adjacentVertices","map","flat","otherVertex","addVertex","newVertex","copy","push","removeVertex","index","edgesToRemove","edgeCopy","vertexCopy","splice","colorVertex","addEdge","newEdge","addDirectedEdge","removeEdge","colorEdge","onMouseDown","event","ADD_VERTEX","x","clientX","y","clientY","position","onVertexMouseDown","SELECT","startDrag","ADD_EDGE","startAddEdge","ADD_DIRECTED_EDGE","startAddDirectedEdge","DELETE","COLOR","onEdgeMouseDown","moveVertex","newPosition","stopDrag","preventDefault","directedBool","onMouseMove","numVertices","length","numEdges","numComponents","components","verticesSeen","Array","fill","dfs","newIndex","indexOf","i","className","onMouseUp","ref","children"],"sources":["/Users/loganfoster/Documents/GitHub/Lrfoster03-Graph-Theory-Sketchpad/graph-theory-sketchpad/src/Field.js"],"sourcesContent":["import React, {useRef, useState} from 'react';\nimport './Field.css';\n\nimport Vertex from \"./Vertex\"\nimport ClickAction from \"./ClickAction\";\nimport EdgeContainer from \"./EdgeContainer\";\nimport InfoBox from \"./InfoBox\";\n\nfunction Field(props) {\n    const {clickAction, color} = props\n    const [dragging, setDragging] = useState(null);\n    const [startEdge, setStartEdge] = useState(null);\n    const [vertices, setVertices] = useState([]);\n    const [edges, setEdges] = useState([])\n    const root = useRef()\n\n    const edgesWithEndpoint = (vertex) => {\n        return edges.filter((edge) => edge.endpoints.includes(vertex))\n    }\n\n    const adjacentVertices = (vertex) => {\n        return edgesWithEndpoint(vertex).map((edge) => {\n            return edge.endpoints\n        }).flat().filter((otherVertex) => otherVertex !== vertex)\n    }\n\n    const addVertex = (newVertex) => {\n        const copy = [...vertices];\n        copy.push(newVertex)\n        setVertices(copy);\n    }\n\n    const removeVertex = (index) => {\n        const vertex = vertices[index];\n        const edgesToRemove = edgesWithEndpoint(vertex);\n        const edgeCopy = [...edges].filter((edge) => !edgesToRemove.includes(edge))\n        setEdges(edgeCopy)\n        const vertexCopy = [...vertices];\n        vertexCopy.splice(index, 1);\n        setVertices(vertexCopy);\n    }\n\n    const colorVertex = (index, color) => {\n        const copy = [...vertices];\n        copy[index].color = color;\n        setVertices(copy);\n    }\n\n    const addEdge = (newEdge) => {\n        const copy = [...edges];\n        copy.push(newEdge)\n        setEdges(copy);\n    }\n\n    const addDirectedEdge = (newEdge) => {\n        const copy = [...edges];\n        copy.push(newEdge)\n        setEdges(copy);\n    }\n\n    const removeEdge = (index) => {\n        const copy = [...edges];\n        copy.splice(index, 1)\n        setEdges(copy);\n    }\n\n    const colorEdge = (index, color) => {\n        const copy = [...edges];\n        copy[index].color = color;\n        setEdges(copy);\n    }\n\n    const onMouseDown = (event) => {\n        if (clickAction === ClickAction.ADD_VERTEX) {\n            const x = event.clientX;\n            const y = event.clientY;\n            addVertex({position: [x, y], color: color});\n        }\n    }\n\n    const onVertexMouseDown = (event, index) => {\n        if (clickAction === ClickAction.SELECT) {\n            startDrag(index)\n        } else if (clickAction === ClickAction.ADD_EDGE) {\n            startAddEdge(index)\n        } else if (clickAction === ClickAction.ADD_DIRECTED_EDGE) {\n            startAddDirectedEdge(index)\n        } else if (clickAction === ClickAction.DELETE) {\n            removeVertex(index)\n        } else if (clickAction === ClickAction.COLOR) {\n            colorVertex(index, color)\n        }\n    }\n\n    const onEdgeMouseDown = (event, index) => {\n        if (clickAction === ClickAction.DELETE) {\n            removeEdge(index)\n        } else if (clickAction === ClickAction.COLOR) {\n            colorEdge(index, color)\n        }\n    }\n\n    const moveVertex = (index, newPosition) => {\n        const copy = [...vertices]\n        copy[index].position = newPosition\n        setVertices(copy);\n    }\n\n    const startDrag = (index) => {\n        setDragging(index)\n    }\n\n    const stopDrag = (event) => {\n        event.preventDefault()\n        setDragging(null)\n    }\n\n    const startAddEdge = (index) => {\n        if (startEdge === null) {\n            setStartEdge(index)\n        } else {\n            addEdge({endpoints: [vertices[startEdge], vertices[index]], color: color, directedBool: false})\n            setStartEdge(null)\n        }\n    }\n\n    const startAddDirectedEdge = (index) => {\n        if (startEdge === null) {\n            setStartEdge(index)\n        } else {\n            addDirectedEdge({endpoints: [vertices[startEdge], vertices[index]], color: color, directedBool: true})\n            setStartEdge(null)\n        }\n    }\n\n    const onMouseMove = (event) => {\n        if (dragging !== null) {\n            event.preventDefault()\n            moveVertex(dragging, [event.clientX, event.clientY])\n        }\n    }\n\n    const numVertices = () => {\n        return vertices.length\n    }\n\n    const numEdges = () => {\n        return edges.length\n    }\n\n    const numComponents = () => {\n        let components = 0;\n        const verticesSeen = new Array(vertices.length).fill(false);\n        const dfs = (index) => {\n            verticesSeen[index] = true\n            for (const vertex of adjacentVertices(vertices[index])) {\n                const newIndex = vertices.indexOf(vertex)\n                if (!verticesSeen[newIndex]){\n                    dfs(newIndex)\n                }\n            }\n        }\n        for (let i = 0; i < vertices.length; i++) {\n            if (verticesSeen[i]) {\n                continue\n            }\n            dfs(i)\n            components++\n        }\n        return components\n    }\n\n\n    return (\n        <div\n            className=\"Field\"\n            onMouseDown={onMouseDown}\n            onMouseMove={onMouseMove}\n            onMouseUp={stopDrag}\n            ref={root}\n        >\n            <InfoBox\n                numVertices={numVertices()}\n                numEdges={numEdges()}\n                numComponents={numComponents()}\n            />\n            {vertices.map((vertex, index) => {\n                return (\n                    <Vertex\n                        className={index === startEdge ? 'Vertex-Selected' : ''}\n                        vertex={vertex}\n                        key={index}\n                        onMouseDown={(event) => onVertexMouseDown(event, index)}\n                    />\n                )\n            })}\n            <EdgeContainer\n                edges={edges}\n                onMouseDown={onEdgeMouseDown}\n            />\n        </div>\n    );\n}\n\nexport default Field;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}