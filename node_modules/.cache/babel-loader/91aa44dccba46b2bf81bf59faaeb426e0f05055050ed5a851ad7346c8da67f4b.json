{"ast":null,"code":"var _jsxFileName = \"/Users/loganfoster/Documents/GitHub/Graph-Theory-Sketchpad/graph-theory-sketchpad/src/Edge.js\";\nimport React from \"react\";\nimport './Edge.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Edge(props) {\n  const {\n    edge,\n    onMouseDown,\n    offsetLeft,\n    multiplicity\n  } = props;\n  const [start, end] = edge.endpoints;\n  const isLoop = start === end;\n  const [x1, y1] = [start.position[0] - offsetLeft, start.position[1]];\n  const [x2, y2] = [end.position[0] - offsetLeft, end.position[1]];\n  const color = edge.color;\n  let d;\n  if (isLoop) {\n    const radius = 35 + multiplicity * 10;\n    const far = Math.sqrt(2) * radius;\n    d = `M ${x1} ${y1}\n             a ${radius},${radius} 0 0 1 ${-far},${-far}\n             a ${radius},${radius} 0 1 1 ${far},${far}`;\n  } else {\n    const magnitude = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    const [vx, vy] = [(y2 - y1) / magnitude, -(x2 - x1) / magnitude];\n    const distance = 25 * Math.ceil(multiplicity / 2);\n    const direction = Math.pow(-1, multiplicity) * (vx >= vy ? vx === vy ? x1 > x2 ? 1 : -1 : 1 : -1);\n    const [midX, midY] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const [x3, y3] = [midX + distance * direction * vx, midY + distance * direction * vy];\n    d = `M ${x1} ${y1}\n             Q ${x3} ${y3} ${x2} ${y2}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"path\", {\n    onMouseDown: onMouseDown,\n    className: \"Edge-Path\",\n    fill: \"transparent\",\n    stroke: color,\n    strokeWidth: \"6\",\n    d: d\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_c = Edge;\nexport default Edge;\nvar _c;\n$RefreshReg$(_c, \"Edge\");","map":{"version":3,"names":["React","Edge","props","edge","onMouseDown","offsetLeft","multiplicity","start","end","endpoints","isLoop","x1","y1","position","x2","y2","color","d","radius","far","Math","sqrt","magnitude","pow","vx","vy","distance","ceil","direction","midX","midY","x3","y3"],"sources":["/Users/loganfoster/Documents/GitHub/Graph-Theory-Sketchpad/graph-theory-sketchpad/src/Edge.js"],"sourcesContent":["import React from \"react\";\nimport './Edge.css'\n\nfunction Edge(props) {\n    const {edge, onMouseDown, offsetLeft, multiplicity} = props\n    const [start, end] = edge.endpoints\n    const isLoop = start === end;\n    const [x1, y1] = [start.position[0] - offsetLeft, start.position[1]]\n    const [x2, y2] = [end.position[0] - offsetLeft, end.position[1]]\n    const color = edge.color\n\n\n    let d;\n    if (isLoop) {\n        const radius = 35 + (multiplicity * 10);\n        const far = Math.sqrt(2) * radius\n        d = `M ${x1} ${y1}\n             a ${radius},${radius} 0 0 1 ${-far},${-far}\n             a ${radius},${radius} 0 1 1 ${far},${far}`\n    } else {\n        const magnitude = Math.sqrt(Math.pow(x1-x2, 2) + Math.pow(y1-y2, 2))\n        const [vx, vy] = [(y2-y1) / magnitude, -(x2-x1) / magnitude]\n        const distance = 25 * Math.ceil(multiplicity / 2)\n        const direction = Math.pow(-1, multiplicity) * (vx >= vy ? (vx === vy ? (x1 > x2 ? 1 : -1) : 1) : -1)\n        const [midX, midY] = [(x1 + x2)/2, (y1 + y2)/2]\n        const [x3, y3] = [midX + (distance * direction * vx), midY + (distance * direction * vy)]\n\n        d = `M ${x1} ${y1}\n             Q ${x3} ${y3} ${x2} ${y2}`\n    }\n\n    return (\n        <path\n            onMouseDown={onMouseDown}\n            className='Edge-Path'\n            fill='transparent'\n            stroke={color}\n            strokeWidth='6'\n            d={d}\n        />\n    )\n\n\n}\n\nexport default Edge;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}