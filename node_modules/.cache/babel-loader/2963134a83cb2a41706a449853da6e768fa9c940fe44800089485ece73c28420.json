{"ast":null,"code":"var _jsxFileName = \"/Users/loganfoster/Documents/GitHub/Graph-Theory-Sketchpad/graph-theory-sketchpad/src/Field.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './Field.css';\nimport Vertex from \"./Vertex\";\nimport ClickAction from \"./ClickAction\";\nimport EdgeContainer from \"./EdgeContainer\";\nimport InfoBox from \"./InfoBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Field(props) {\n  _s();\n  const {\n    clickAction,\n    color\n  } = props;\n  const [dragging, setDragging] = useState(null);\n  const [startEdge, setStartEdge] = useState(null);\n  const [vertices, setVertices] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const root = useRef();\n  const edgesWithEndpoint = vertex => {\n    return edges.filter(edge => edge.endpoints.includes(vertex));\n  };\n  const adjacentVertices = vertex => {\n    return edgesWithEndpoint(vertex).map(edge => {\n      return edge.endpoints;\n    }).flat().filter(otherVertex => otherVertex !== vertex);\n  };\n  const addVertex = newVertex => {\n    const copy = [...vertices];\n    copy.push(newVertex);\n    setVertices(copy);\n  };\n  const removeVertex = index => {\n    const vertex = vertices[index];\n    const edgesToRemove = edgesWithEndpoint(vertex);\n    const edgeCopy = [...edges].filter(edge => !edgesToRemove.includes(edge));\n    setEdges(edgeCopy);\n    const vertexCopy = [...vertices];\n    vertexCopy.splice(index, 1);\n    setVertices(vertexCopy);\n  };\n  const colorVertex = (index, color) => {\n    const copy = [...vertices];\n    copy[index].color = color;\n    setVertices(copy);\n  };\n  const addEdge = newEdge => {\n    const copy = [...edges];\n    copy.push(newEdge);\n    setEdges(copy);\n  };\n  const removeEdge = index => {\n    const copy = [...edges];\n    copy.splice(index, 1);\n    setEdges(copy);\n  };\n  const colorEdge = (index, color) => {\n    const copy = [...edges];\n    copy[index].color = color;\n    setEdges(copy);\n  };\n  const onMouseDown = event => {\n    if (clickAction === ClickAction.ADD_VERTEX) {\n      const x = event.clientX;\n      const y = event.clientY;\n      addVertex({\n        position: [x, y],\n        color: color\n      });\n    }\n  };\n  const onVertexMouseDown = (event, index) => {\n    if (clickAction === ClickAction.SELECT) {\n      startDrag(index);\n    } else if (clickAction === ClickAction.ADD_EDGE) {\n      startAddEdge(index);\n    } else if (clickAction === ClickAction.ADD_DIRECTED_EDGE) {\n      startAddDirectedEdge(index);\n    } else if (clickAction === ClickAction.DELETE) {\n      removeVertex(index);\n    } else if (clickAction === ClickAction.COLOR) {\n      colorVertex(index, color);\n    }\n  };\n  const onEdgeMouseDown = (event, index) => {\n    if (clickAction === ClickAction.DELETE) {\n      removeEdge(index);\n    } else if (clickAction === ClickAction.COLOR) {\n      colorEdge(index, color);\n    }\n  };\n  const moveVertex = (index, newPosition) => {\n    const copy = [...vertices];\n    copy[index].position = newPosition;\n    setVertices(copy);\n  };\n  const startDrag = index => {\n    setDragging(index);\n  };\n  const stopDrag = event => {\n    event.preventDefault();\n    setDragging(null);\n  };\n  const startAddEdge = index => {\n    if (startEdge === null) {\n      setStartEdge(index);\n    } else {\n      addEdge({\n        endpoints: [vertices[startEdge], vertices[index]],\n        color: color\n      });\n      setStartEdge(null);\n    }\n  };\n  const startAddDirectedEdge = index => {\n    if (startEdge === null) {\n      setStartEdge(index);\n    } else {\n      addDirectedEdge({\n        endpoints: [vertices[startEdge], vertices[index]],\n        color: color\n      });\n      setStartEdge(null);\n    }\n  };\n  const onMouseMove = event => {\n    if (dragging !== null) {\n      event.preventDefault();\n      moveVertex(dragging, [event.clientX, event.clientY]);\n    }\n  };\n  const numVertices = () => {\n    return vertices.length;\n  };\n  const numEdges = () => {\n    return edges.length;\n  };\n  const numComponents = () => {\n    let components = 0;\n    const verticesSeen = new Array(vertices.length).fill(false);\n    const dfs = index => {\n      verticesSeen[index] = true;\n      for (const vertex of adjacentVertices(vertices[index])) {\n        const newIndex = vertices.indexOf(vertex);\n        if (!verticesSeen[newIndex]) {\n          dfs(newIndex);\n        }\n      }\n    };\n    for (let i = 0; i < vertices.length; i++) {\n      if (verticesSeen[i]) {\n        continue;\n      }\n      dfs(i);\n      components++;\n    }\n    return components;\n  };\n  const isSimpleGraph = () => {\n    const endpointsSeen = [];\n    for (const edge of edges) {\n      if (edge.endpoints in endpointsSeen) {\n        return false;\n      } else if (edge.endpoints[0] === edge.endpoints[1]) {\n        return false;\n      }\n      endpointsSeen.push(edge);\n    }\n    return true;\n  };\n  const isNullGraph = () => {\n    return vertices.length === 0;\n  };\n  const isTreeGraph = () => {\n    return isForestGraph() && numComponents() === 1;\n  };\n  const isForestGraph = () => {\n    return numVertices() - numEdges() === numComponents() && isSimpleGraph();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Field\",\n    onMouseDown: onMouseDown,\n    onMouseMove: onMouseMove,\n    onMouseUp: stopDrag,\n    ref: root,\n    children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n      numVertices: numVertices(),\n      numEdges: numEdges(),\n      numComponents: numComponents()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), vertices.map((vertex, index) => {\n      return /*#__PURE__*/_jsxDEV(Vertex, {\n        className: index === startEdge ? 'Vertex-Selected' : '',\n        vertex: vertex,\n        onMouseDown: event => onVertexMouseDown(event, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(EdgeContainer, {\n      edges: edges,\n      onMouseDown: onEdgeMouseDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n}\n_s(Field, \"SSZRkKiI11pXR4Rx00tPbIBRtCs=\");\n_c = Field;\nexport default Field;\nvar _c;\n$RefreshReg$(_c, \"Field\");","map":{"version":3,"names":["React","useRef","useState","Vertex","ClickAction","EdgeContainer","InfoBox","Field","props","clickAction","color","dragging","setDragging","startEdge","setStartEdge","vertices","setVertices","edges","setEdges","root","edgesWithEndpoint","vertex","filter","edge","endpoints","includes","adjacentVertices","map","flat","otherVertex","addVertex","newVertex","copy","push","removeVertex","index","edgesToRemove","edgeCopy","vertexCopy","splice","colorVertex","addEdge","newEdge","removeEdge","colorEdge","onMouseDown","event","ADD_VERTEX","x","clientX","y","clientY","position","onVertexMouseDown","SELECT","startDrag","ADD_EDGE","startAddEdge","ADD_DIRECTED_EDGE","startAddDirectedEdge","DELETE","COLOR","onEdgeMouseDown","moveVertex","newPosition","stopDrag","preventDefault","addDirectedEdge","onMouseMove","numVertices","length","numEdges","numComponents","components","verticesSeen","Array","fill","dfs","newIndex","indexOf","i","isSimpleGraph","endpointsSeen","isNullGraph","isTreeGraph","isForestGraph"],"sources":["/Users/loganfoster/Documents/GitHub/Graph-Theory-Sketchpad/graph-theory-sketchpad/src/Field.js"],"sourcesContent":["import React, {useRef, useState} from 'react';\nimport './Field.css';\n\nimport Vertex from \"./Vertex\"\nimport ClickAction from \"./ClickAction\";\nimport EdgeContainer from \"./EdgeContainer\";\nimport InfoBox from \"./InfoBox\";\n\nfunction Field(props) {\n    const {clickAction, color} = props\n    const [dragging, setDragging] = useState(null);\n    const [startEdge, setStartEdge] = useState(null);\n    const [vertices, setVertices] = useState([]);\n    const [edges, setEdges] = useState([])\n    const root = useRef()\n\n    const edgesWithEndpoint = (vertex) => {\n        return edges.filter((edge) => edge.endpoints.includes(vertex))\n    }\n\n    const adjacentVertices = (vertex) => {\n        return edgesWithEndpoint(vertex).map((edge) => {\n            return edge.endpoints\n        }).flat().filter((otherVertex) => otherVertex !== vertex)\n    }\n\n    const addVertex = (newVertex) => {\n        const copy = [...vertices];\n        copy.push(newVertex)\n        setVertices(copy);\n    }\n\n    const removeVertex = (index) => {\n        const vertex = vertices[index];\n        const edgesToRemove = edgesWithEndpoint(vertex);\n        const edgeCopy = [...edges].filter((edge) => !edgesToRemove.includes(edge))\n        setEdges(edgeCopy)\n        const vertexCopy = [...vertices];\n        vertexCopy.splice(index, 1);\n        setVertices(vertexCopy);\n    }\n\n    const colorVertex = (index, color) => {\n        const copy = [...vertices];\n        copy[index].color = color;\n        setVertices(copy);\n    }\n\n    const addEdge = (newEdge) => {\n        const copy = [...edges];\n        copy.push(newEdge)\n        setEdges(copy);\n    }\n\n    const removeEdge = (index) => {\n        const copy = [...edges];\n        copy.splice(index, 1)\n        setEdges(copy);\n    }\n\n    const colorEdge = (index, color) => {\n        const copy = [...edges];\n        copy[index].color = color;\n        setEdges(copy);\n    }\n\n    const onMouseDown = (event) => {\n        if (clickAction === ClickAction.ADD_VERTEX) {\n            const x = event.clientX;\n            const y = event.clientY;\n            addVertex({position: [x, y], color: color});\n        }\n    }\n\n    const onVertexMouseDown = (event, index) => {\n        if (clickAction === ClickAction.SELECT) {\n            startDrag(index)\n        } else if (clickAction === ClickAction.ADD_EDGE) {\n            startAddEdge(index)\n        } else if (clickAction === ClickAction.ADD_DIRECTED_EDGE) {\n            startAddDirectedEdge(index)\n        } else if (clickAction === ClickAction.DELETE) {\n            removeVertex(index)\n        } else if (clickAction === ClickAction.COLOR) {\n            colorVertex(index, color)\n        }\n    }\n\n    const onEdgeMouseDown = (event, index) => {\n        if (clickAction === ClickAction.DELETE) {\n            removeEdge(index)\n        } else if (clickAction === ClickAction.COLOR) {\n            colorEdge(index, color)\n        }\n    }\n\n    const moveVertex = (index, newPosition) => {\n        const copy = [...vertices]\n        copy[index].position = newPosition\n        setVertices(copy);\n    }\n\n    const startDrag = (index) => {\n        setDragging(index)\n    }\n\n    const stopDrag = (event) => {\n        event.preventDefault()\n        setDragging(null)\n    }\n\n    const startAddEdge = (index) => {\n        if (startEdge === null) {\n            setStartEdge(index)\n        } else {\n            addEdge({endpoints: [vertices[startEdge], vertices[index]], color: color})\n            setStartEdge(null)\n        }\n    }\n\n    const startAddDirectedEdge = (index) => {\n        if (startEdge === null) {\n            setStartEdge(index)\n        } else {\n            addDirectedEdge({endpoints: [vertices[startEdge], vertices[index]], color: color})\n            setStartEdge(null)\n        }\n    }\n\n    const onMouseMove = (event) => {\n        if (dragging !== null) {\n            event.preventDefault()\n            moveVertex(dragging, [event.clientX, event.clientY])\n        }\n    }\n\n    const numVertices = () => {\n        return vertices.length\n    }\n\n    const numEdges = () => {\n        return edges.length\n    }\n\n    const numComponents = () => {\n        let components = 0;\n        const verticesSeen = new Array(vertices.length).fill(false);\n        const dfs = (index) => {\n            verticesSeen[index] = true\n            for (const vertex of adjacentVertices(vertices[index])) {\n                const newIndex = vertices.indexOf(vertex)\n                if (!verticesSeen[newIndex]){\n                    dfs(newIndex)\n                }\n            }\n        }\n        for (let i = 0; i < vertices.length; i++) {\n            if (verticesSeen[i]) {\n                continue\n            }\n            dfs(i)\n            components++\n        }\n        return components\n    }\n\n    const isSimpleGraph = () => {\n        const endpointsSeen = []\n        for (const edge of edges) {\n            if (edge.endpoints in endpointsSeen) {\n                return false\n            } else if (edge.endpoints[0] === edge.endpoints[1]) {\n                return false\n            }\n            endpointsSeen.push(edge)\n        }\n        return true\n    }\n\n    const isNullGraph = () => {\n        return vertices.length === 0\n    }\n\n    const isTreeGraph = () => {\n        return isForestGraph() && numComponents() === 1\n    }\n\n    const isForestGraph = () => {\n        return numVertices() - numEdges() === numComponents() && isSimpleGraph()\n    }\n\n    return (\n        <div\n            className=\"Field\"\n            onMouseDown={onMouseDown}\n            onMouseMove={onMouseMove}\n            onMouseUp={stopDrag}\n            ref={root}\n        >\n            <InfoBox\n                numVertices={numVertices()}\n                numEdges={numEdges()}\n                numComponents={numComponents()}\n            />\n            {vertices.map((vertex, index) => {\n                return (\n                    <Vertex\n                        className={index === startEdge ? 'Vertex-Selected' : ''}\n                        vertex={vertex}\n                        key={index}\n                        onMouseDown={(event) => onVertexMouseDown(event, index)}\n                    />\n                )\n            })}\n            <EdgeContainer\n                edges={edges}\n                onMouseDown={onEdgeMouseDown}\n            />\n        </div>\n    );\n}\n\nexport default Field;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}